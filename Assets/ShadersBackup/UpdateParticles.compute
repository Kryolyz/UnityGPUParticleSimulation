// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "include/Particle.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<Particle> Particles;
RWBuffer<int> ParticleList;
RWBuffer<int> ParticleListHead;

float dt;

bool IsNaN(float x)
{
    return !(x < 0.f || x > 0.f || x == 0.f);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = IndexFromXY(id.xy);
    Particle particle = Particles[index];
    
    if (particle.type == PARTICLE_TYPE_NONE)
        return;
    float2 newPosition = particle.newP + particle.newV * dt + particle.a * (dt * dt * 0.5f);
        
    //if (IsNaN(newPosition.x))
    //{
        particle.p = float2(100, 100);
        //particle.temperature = 1.0f;
    //}
    //else
        particle.p = newPosition;
    
    
    particle.v = particle.newV + particle.a * dt * 0.5f;
    particle.a = float2(0, 0);
    
    clampParticle(particle.p, particle.v, particle.size, restitutionCoefficient);
    Particles[index] = particle;
    
    int3 gridIndex = GridIndex(particle.p);
    int originalListIndex;
    InterlockedExchange(ParticleListHead[gridIndex.z], index, originalListIndex);
    ParticleList[index] = originalListIndex;
}
